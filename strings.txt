# http://pythontutor.ru/lessons/str/problems/delete_chunk/
# Strings. "Delete chunk"

if __name__ == '__main__':
    s = input()

    print(s[:s.find('h')] + s[s.rfind('h')+1:])

# http://pythontutor.ru/lessons/str/problems/second_occurence/
# Strings. "Second occurence"

if __name__ == '__main__':
    s = input()
    counter = 0
    for i in range(len(s)):
        if s[i] == 'f':
            counter += 1
        if counter == 2:
            print('f', i)
            break
    if counter == 1:
        print('-1')
    if counter == 0:
        print('-2')

# http://pythontutor.ru/lessons/str/problems/first_and_last_occurences/
# Strings. "First and last occurences"

if __name__ == '__main__':
    s = input()
    res = s.count('f')
    if res > 1:
        print(s.find('f'))
        print(s.rfind('f'))
    if res == 1:
        print(s.find('f'))


# Task about swapcase. Diceded to do with the help of generator))

if __name__ == '__main__':
    st = input()

    st_list = []
    for letter in st:
        if letter.isupper():
            st_list.append(letter.lower())
        else:
            st_list.append(letter.upper())

    st = ''.join(st_list)
    print(st)

import re
# Find the number of occurence of template

if __name__ == '__main__':
    st = input()
    subst = input()

    consists = re.findall(subst, st)
    print(len(consists))

# Change the letter in the string
if __name__ == '__main__':
    st = input('Input the string: ')
    ind, *el = input().split()
    el = ''.join(el)
    print(st[:int(ind)] + el + st[int(ind) + 1:])

# String. "Text Alignment" 

if __name__ == '__main__':
    thickness = int(input()) #This must be an odd number
    c = 'H'

    #Top Cone
    for i in range(thickness):
        print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

    #Top Pillars
    for i in range(thickness+1):
        print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

    #Middle Belt
    for i in range((thickness+1)//2):
        print((c*thickness*5).center(thickness*6))

    #Bottom Pillars
    for i in range(thickness+1):
        print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

    #Bottom Cone
    for i in range(thickness):
        print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))	