# Errors and Exceptions. 'Exceptions'

if __name__ == '__main__':
    for _ in range(int(input())):
        a, *b = input().split()

        try:
            print(int(a)//int(b[0]))
        except (ZeroDivisionError, ValueError) as e:
            print('Error code:', e)

# Error and Exceptions. 'Incorrect regex'

import re

if __name__ == '__main__':
    for _ in range(int(input())):
        try:
            re.compile(input())
            print('True')
        except re.error:
            print('False')

# Clousers and Decorators
# Maybe it's hardcore, but i don't know how else can i do this task

def wrapper(f):
    def fun(l):
        a = '+91'
        l1 = []
        for i in l:
            if len(i) == 10:
                l1.append(' '.join([a, i[:5], i[5:]]))
            if i.startswith('0') and len(i) == 11:
                l1.append(' '.join([a, i[1:6], i[6:]]))
            if i.startswith('91') and len(i) == 12:
                l1.append(' '.join([a, i[2:7], i[7:]]))
            if i.startswith('+91') and len(i) == 13:
                l1.append(' '.join([a, i[3:8], i[8:]]))
        f(l1)

    return fun


@wrapper
def sort_phone(l):
    print(*sorted(l), sep='\n')


if __name__ == '__main__':
    l = [input() for _ in range(int(input()))]
    sort_phone(l)


# Clousers and Decorators. "Decorators 2 - Name Directory"
# I did it!!!!

def person_lister(f):
    def inner(people):
        my_dict = {(i[0], i[2]): i for i in people}
        print(my_dict)
        people = sorted(my_dict.items(), key=lambda x: x[0][1])
        val = list(map(lambda x: x[1], people))
        print(val)
        return list(map(f, val))


@person_lister
def name_format(person):
    return ("Mr. " if person[3] == "M" else "Ms. ") + person[0] + " " + person[1]


if __name__ == '__main__':
    people = [input().split() for i in range(int(input()))]
    print(*name_format(people), sep='\n')

